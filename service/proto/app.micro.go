// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: app.proto

package goMicro_srv_order

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Order service

type OrderService interface {
	CreateCheShiChuang(ctx context.Context, in *CheShiChuangInfo, opts ...client.CallOption) (*Response, error)
	QueryCheShiChuangs(ctx context.Context, in *CheShiChuangInfo, opts ...client.CallOption) (*Response, error)
	QueryCheShiChuang(ctx context.Context, in *CheShiChuangInfo, opts ...client.CallOption) (*Response, error)
	UpdateCheShiChuang(ctx context.Context, in *CheShiChuangInfo, opts ...client.CallOption) (*Response, error)
	DeleteCheShiChuang(ctx context.Context, in *CheShiChuangInfo, opts ...client.CallOption) (*Response, error)
	CreateDingDianTui(ctx context.Context, in *DingDianTuiInfo, opts ...client.CallOption) (*Response, error)
	QueryDingDianTuis(ctx context.Context, in *DingDianTuiInfo, opts ...client.CallOption) (*Response, error)
	QueryDingDianTui(ctx context.Context, in *DingDianTuiInfo, opts ...client.CallOption) (*Response, error)
	UpdateDingDianTui(ctx context.Context, in *DingDianTuiInfo, opts ...client.CallOption) (*Response, error)
	DeleteDingDianTui(ctx context.Context, in *DingDianTuiInfo, opts ...client.CallOption) (*Response, error)
	CreateKeLiuJing(ctx context.Context, in *KeLiuJingInfo, opts ...client.CallOption) (*Response, error)
	QueryKeLiuJings(ctx context.Context, in *KeLiuJingInfo, opts ...client.CallOption) (*Response, error)
	QueryKeLiuJing(ctx context.Context, in *KeLiuJingInfo, opts ...client.CallOption) (*Response, error)
	UpdateKeLiuJing(ctx context.Context, in *KeLiuJingInfo, opts ...client.CallOption) (*Response, error)
	DeleteKeLiuJing(ctx context.Context, in *KeLiuJingInfo, opts ...client.CallOption) (*Response, error)
	CreateChaoShiXin(ctx context.Context, in *ChaoShiXinInfo, opts ...client.CallOption) (*Response, error)
	QueryChaoShiXins(ctx context.Context, in *ChaoShiXinInfo, opts ...client.CallOption) (*Response, error)
	QueryChaoShiXin(ctx context.Context, in *ChaoShiXinInfo, opts ...client.CallOption) (*Response, error)
	UpdateChaoShiXin(ctx context.Context, in *ChaoShiXinInfo, opts ...client.CallOption) (*Response, error)
	DeleteChaoShiXin(ctx context.Context, in *ChaoShiXinInfo, opts ...client.CallOption) (*Response, error)
	CreateAIYunHu(ctx context.Context, in *AIYunHuInfo, opts ...client.CallOption) (*Response, error)
	QueryAIYunHus(ctx context.Context, in *AIYunHuInfo, opts ...client.CallOption) (*Response, error)
	QueryAIYunHu(ctx context.Context, in *AIYunHuInfo, opts ...client.CallOption) (*Response, error)
	UpdateAIYunHu(ctx context.Context, in *AIYunHuInfo, opts ...client.CallOption) (*Response, error)
	DeleteAIYunHu(ctx context.Context, in *AIYunHuInfo, opts ...client.CallOption) (*Response, error)
	CreatePinXiaoTong(ctx context.Context, in *PinXiaoTongInfo, opts ...client.CallOption) (*Response, error)
	QueryPinXiaoTongs(ctx context.Context, in *PinXiaoTongInfo, opts ...client.CallOption) (*Response, error)
	QueryPinXiaoTong(ctx context.Context, in *PinXiaoTongInfo, opts ...client.CallOption) (*Response, error)
	UpdatePinXiaoTong(ctx context.Context, in *PinXiaoTongInfo, opts ...client.CallOption) (*Response, error)
	DeletePinXiaoTong(ctx context.Context, in *PinXiaoTongInfo, opts ...client.CallOption) (*Response, error)
	CreateYunHuaXiang(ctx context.Context, in *YunHuaXiangInfo, opts ...client.CallOption) (*Response, error)
	QueryYunHuaXiangs(ctx context.Context, in *YunHuaXiangInfo, opts ...client.CallOption) (*Response, error)
	QueryYunHuaXiang(ctx context.Context, in *YunHuaXiangInfo, opts ...client.CallOption) (*Response, error)
	UpdateYunHuaXiang(ctx context.Context, in *YunHuaXiangInfo, opts ...client.CallOption) (*Response, error)
	DeleteYunHuaXiang(ctx context.Context, in *YunHuaXiangInfo, opts ...client.CallOption) (*Response, error)
	CreateWaQianKe(ctx context.Context, in *WaQianKeInfo, opts ...client.CallOption) (*Response, error)
	QueryWaQianKes(ctx context.Context, in *WaQianKeInfo, opts ...client.CallOption) (*Response, error)
	QueryWaQianKe(ctx context.Context, in *WaQianKeInfo, opts ...client.CallOption) (*Response, error)
	UpdateWaQianKe(ctx context.Context, in *WaQianKeInfo, opts ...client.CallOption) (*Response, error)
	DeleteWaQianKe(ctx context.Context, in *WaQianKeInfo, opts ...client.CallOption) (*Response, error)
	Login(ctx context.Context, in *LoginInfo, opts ...client.CallOption) (*Response, error)
	User(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*Response, error)
	Register(ctx context.Context, in *RegisterInfo, opts ...client.CallOption) (*Response, error)
	SendCode(ctx context.Context, in *LoginInfo, opts ...client.CallOption) (*Response, error)
}

type orderService struct {
	c    client.Client
	name string
}

func NewOrderService(name string, c client.Client) OrderService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "goMicro.srv.order"
	}
	return &orderService{
		c:    c,
		name: name,
	}
}

func (c *orderService) CreateCheShiChuang(ctx context.Context, in *CheShiChuangInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.CreateCheShiChuang", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) QueryCheShiChuangs(ctx context.Context, in *CheShiChuangInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.QueryCheShiChuangs", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) QueryCheShiChuang(ctx context.Context, in *CheShiChuangInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.QueryCheShiChuang", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) UpdateCheShiChuang(ctx context.Context, in *CheShiChuangInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.UpdateCheShiChuang", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) DeleteCheShiChuang(ctx context.Context, in *CheShiChuangInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.DeleteCheShiChuang", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) CreateDingDianTui(ctx context.Context, in *DingDianTuiInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.CreateDingDianTui", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) QueryDingDianTuis(ctx context.Context, in *DingDianTuiInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.QueryDingDianTuis", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) QueryDingDianTui(ctx context.Context, in *DingDianTuiInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.QueryDingDianTui", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) UpdateDingDianTui(ctx context.Context, in *DingDianTuiInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.UpdateDingDianTui", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) DeleteDingDianTui(ctx context.Context, in *DingDianTuiInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.DeleteDingDianTui", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) CreateKeLiuJing(ctx context.Context, in *KeLiuJingInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.CreateKeLiuJing", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) QueryKeLiuJings(ctx context.Context, in *KeLiuJingInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.QueryKeLiuJings", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) QueryKeLiuJing(ctx context.Context, in *KeLiuJingInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.QueryKeLiuJing", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) UpdateKeLiuJing(ctx context.Context, in *KeLiuJingInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.UpdateKeLiuJing", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) DeleteKeLiuJing(ctx context.Context, in *KeLiuJingInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.DeleteKeLiuJing", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) CreateChaoShiXin(ctx context.Context, in *ChaoShiXinInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.CreateChaoShiXin", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) QueryChaoShiXins(ctx context.Context, in *ChaoShiXinInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.QueryChaoShiXins", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) QueryChaoShiXin(ctx context.Context, in *ChaoShiXinInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.QueryChaoShiXin", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) UpdateChaoShiXin(ctx context.Context, in *ChaoShiXinInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.UpdateChaoShiXin", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) DeleteChaoShiXin(ctx context.Context, in *ChaoShiXinInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.DeleteChaoShiXin", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) CreateAIYunHu(ctx context.Context, in *AIYunHuInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.CreateAIYunHu", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) QueryAIYunHus(ctx context.Context, in *AIYunHuInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.QueryAIYunHus", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) QueryAIYunHu(ctx context.Context, in *AIYunHuInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.QueryAIYunHu", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) UpdateAIYunHu(ctx context.Context, in *AIYunHuInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.UpdateAIYunHu", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) DeleteAIYunHu(ctx context.Context, in *AIYunHuInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.DeleteAIYunHu", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) CreatePinXiaoTong(ctx context.Context, in *PinXiaoTongInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.CreatePinXiaoTong", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) QueryPinXiaoTongs(ctx context.Context, in *PinXiaoTongInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.QueryPinXiaoTongs", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) QueryPinXiaoTong(ctx context.Context, in *PinXiaoTongInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.QueryPinXiaoTong", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) UpdatePinXiaoTong(ctx context.Context, in *PinXiaoTongInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.UpdatePinXiaoTong", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) DeletePinXiaoTong(ctx context.Context, in *PinXiaoTongInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.DeletePinXiaoTong", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) CreateYunHuaXiang(ctx context.Context, in *YunHuaXiangInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.CreateYunHuaXiang", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) QueryYunHuaXiangs(ctx context.Context, in *YunHuaXiangInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.QueryYunHuaXiangs", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) QueryYunHuaXiang(ctx context.Context, in *YunHuaXiangInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.QueryYunHuaXiang", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) UpdateYunHuaXiang(ctx context.Context, in *YunHuaXiangInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.UpdateYunHuaXiang", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) DeleteYunHuaXiang(ctx context.Context, in *YunHuaXiangInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.DeleteYunHuaXiang", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) CreateWaQianKe(ctx context.Context, in *WaQianKeInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.CreateWaQianKe", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) QueryWaQianKes(ctx context.Context, in *WaQianKeInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.QueryWaQianKes", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) QueryWaQianKe(ctx context.Context, in *WaQianKeInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.QueryWaQianKe", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) UpdateWaQianKe(ctx context.Context, in *WaQianKeInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.UpdateWaQianKe", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) DeleteWaQianKe(ctx context.Context, in *WaQianKeInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.DeleteWaQianKe", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) Login(ctx context.Context, in *LoginInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.Login", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) User(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.User", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) Register(ctx context.Context, in *RegisterInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.Register", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) SendCode(ctx context.Context, in *LoginInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.SendCode", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Order service

type OrderHandler interface {
	CreateCheShiChuang(context.Context, *CheShiChuangInfo, *Response) error
	QueryCheShiChuangs(context.Context, *CheShiChuangInfo, *Response) error
	QueryCheShiChuang(context.Context, *CheShiChuangInfo, *Response) error
	UpdateCheShiChuang(context.Context, *CheShiChuangInfo, *Response) error
	DeleteCheShiChuang(context.Context, *CheShiChuangInfo, *Response) error
	CreateDingDianTui(context.Context, *DingDianTuiInfo, *Response) error
	QueryDingDianTuis(context.Context, *DingDianTuiInfo, *Response) error
	QueryDingDianTui(context.Context, *DingDianTuiInfo, *Response) error
	UpdateDingDianTui(context.Context, *DingDianTuiInfo, *Response) error
	DeleteDingDianTui(context.Context, *DingDianTuiInfo, *Response) error
	CreateKeLiuJing(context.Context, *KeLiuJingInfo, *Response) error
	QueryKeLiuJings(context.Context, *KeLiuJingInfo, *Response) error
	QueryKeLiuJing(context.Context, *KeLiuJingInfo, *Response) error
	UpdateKeLiuJing(context.Context, *KeLiuJingInfo, *Response) error
	DeleteKeLiuJing(context.Context, *KeLiuJingInfo, *Response) error
	CreateChaoShiXin(context.Context, *ChaoShiXinInfo, *Response) error
	QueryChaoShiXins(context.Context, *ChaoShiXinInfo, *Response) error
	QueryChaoShiXin(context.Context, *ChaoShiXinInfo, *Response) error
	UpdateChaoShiXin(context.Context, *ChaoShiXinInfo, *Response) error
	DeleteChaoShiXin(context.Context, *ChaoShiXinInfo, *Response) error
	CreateAIYunHu(context.Context, *AIYunHuInfo, *Response) error
	QueryAIYunHus(context.Context, *AIYunHuInfo, *Response) error
	QueryAIYunHu(context.Context, *AIYunHuInfo, *Response) error
	UpdateAIYunHu(context.Context, *AIYunHuInfo, *Response) error
	DeleteAIYunHu(context.Context, *AIYunHuInfo, *Response) error
	CreatePinXiaoTong(context.Context, *PinXiaoTongInfo, *Response) error
	QueryPinXiaoTongs(context.Context, *PinXiaoTongInfo, *Response) error
	QueryPinXiaoTong(context.Context, *PinXiaoTongInfo, *Response) error
	UpdatePinXiaoTong(context.Context, *PinXiaoTongInfo, *Response) error
	DeletePinXiaoTong(context.Context, *PinXiaoTongInfo, *Response) error
	CreateYunHuaXiang(context.Context, *YunHuaXiangInfo, *Response) error
	QueryYunHuaXiangs(context.Context, *YunHuaXiangInfo, *Response) error
	QueryYunHuaXiang(context.Context, *YunHuaXiangInfo, *Response) error
	UpdateYunHuaXiang(context.Context, *YunHuaXiangInfo, *Response) error
	DeleteYunHuaXiang(context.Context, *YunHuaXiangInfo, *Response) error
	CreateWaQianKe(context.Context, *WaQianKeInfo, *Response) error
	QueryWaQianKes(context.Context, *WaQianKeInfo, *Response) error
	QueryWaQianKe(context.Context, *WaQianKeInfo, *Response) error
	UpdateWaQianKe(context.Context, *WaQianKeInfo, *Response) error
	DeleteWaQianKe(context.Context, *WaQianKeInfo, *Response) error
	Login(context.Context, *LoginInfo, *Response) error
	User(context.Context, *UserInfo, *Response) error
	Register(context.Context, *RegisterInfo, *Response) error
	SendCode(context.Context, *LoginInfo, *Response) error
}

func RegisterOrderHandler(s server.Server, hdlr OrderHandler, opts ...server.HandlerOption) error {
	type order interface {
		CreateCheShiChuang(ctx context.Context, in *CheShiChuangInfo, out *Response) error
		QueryCheShiChuangs(ctx context.Context, in *CheShiChuangInfo, out *Response) error
		QueryCheShiChuang(ctx context.Context, in *CheShiChuangInfo, out *Response) error
		UpdateCheShiChuang(ctx context.Context, in *CheShiChuangInfo, out *Response) error
		DeleteCheShiChuang(ctx context.Context, in *CheShiChuangInfo, out *Response) error
		CreateDingDianTui(ctx context.Context, in *DingDianTuiInfo, out *Response) error
		QueryDingDianTuis(ctx context.Context, in *DingDianTuiInfo, out *Response) error
		QueryDingDianTui(ctx context.Context, in *DingDianTuiInfo, out *Response) error
		UpdateDingDianTui(ctx context.Context, in *DingDianTuiInfo, out *Response) error
		DeleteDingDianTui(ctx context.Context, in *DingDianTuiInfo, out *Response) error
		CreateKeLiuJing(ctx context.Context, in *KeLiuJingInfo, out *Response) error
		QueryKeLiuJings(ctx context.Context, in *KeLiuJingInfo, out *Response) error
		QueryKeLiuJing(ctx context.Context, in *KeLiuJingInfo, out *Response) error
		UpdateKeLiuJing(ctx context.Context, in *KeLiuJingInfo, out *Response) error
		DeleteKeLiuJing(ctx context.Context, in *KeLiuJingInfo, out *Response) error
		CreateChaoShiXin(ctx context.Context, in *ChaoShiXinInfo, out *Response) error
		QueryChaoShiXins(ctx context.Context, in *ChaoShiXinInfo, out *Response) error
		QueryChaoShiXin(ctx context.Context, in *ChaoShiXinInfo, out *Response) error
		UpdateChaoShiXin(ctx context.Context, in *ChaoShiXinInfo, out *Response) error
		DeleteChaoShiXin(ctx context.Context, in *ChaoShiXinInfo, out *Response) error
		CreateAIYunHu(ctx context.Context, in *AIYunHuInfo, out *Response) error
		QueryAIYunHus(ctx context.Context, in *AIYunHuInfo, out *Response) error
		QueryAIYunHu(ctx context.Context, in *AIYunHuInfo, out *Response) error
		UpdateAIYunHu(ctx context.Context, in *AIYunHuInfo, out *Response) error
		DeleteAIYunHu(ctx context.Context, in *AIYunHuInfo, out *Response) error
		CreatePinXiaoTong(ctx context.Context, in *PinXiaoTongInfo, out *Response) error
		QueryPinXiaoTongs(ctx context.Context, in *PinXiaoTongInfo, out *Response) error
		QueryPinXiaoTong(ctx context.Context, in *PinXiaoTongInfo, out *Response) error
		UpdatePinXiaoTong(ctx context.Context, in *PinXiaoTongInfo, out *Response) error
		DeletePinXiaoTong(ctx context.Context, in *PinXiaoTongInfo, out *Response) error
		CreateYunHuaXiang(ctx context.Context, in *YunHuaXiangInfo, out *Response) error
		QueryYunHuaXiangs(ctx context.Context, in *YunHuaXiangInfo, out *Response) error
		QueryYunHuaXiang(ctx context.Context, in *YunHuaXiangInfo, out *Response) error
		UpdateYunHuaXiang(ctx context.Context, in *YunHuaXiangInfo, out *Response) error
		DeleteYunHuaXiang(ctx context.Context, in *YunHuaXiangInfo, out *Response) error
		CreateWaQianKe(ctx context.Context, in *WaQianKeInfo, out *Response) error
		QueryWaQianKes(ctx context.Context, in *WaQianKeInfo, out *Response) error
		QueryWaQianKe(ctx context.Context, in *WaQianKeInfo, out *Response) error
		UpdateWaQianKe(ctx context.Context, in *WaQianKeInfo, out *Response) error
		DeleteWaQianKe(ctx context.Context, in *WaQianKeInfo, out *Response) error
		Login(ctx context.Context, in *LoginInfo, out *Response) error
		User(ctx context.Context, in *UserInfo, out *Response) error
		Register(ctx context.Context, in *RegisterInfo, out *Response) error
		SendCode(ctx context.Context, in *LoginInfo, out *Response) error
	}
	type Order struct {
		order
	}
	h := &orderHandler{hdlr}
	return s.Handle(s.NewHandler(&Order{h}, opts...))
}

type orderHandler struct {
	OrderHandler
}

func (h *orderHandler) CreateCheShiChuang(ctx context.Context, in *CheShiChuangInfo, out *Response) error {
	return h.OrderHandler.CreateCheShiChuang(ctx, in, out)
}

func (h *orderHandler) QueryCheShiChuangs(ctx context.Context, in *CheShiChuangInfo, out *Response) error {
	return h.OrderHandler.QueryCheShiChuangs(ctx, in, out)
}

func (h *orderHandler) QueryCheShiChuang(ctx context.Context, in *CheShiChuangInfo, out *Response) error {
	return h.OrderHandler.QueryCheShiChuang(ctx, in, out)
}

func (h *orderHandler) UpdateCheShiChuang(ctx context.Context, in *CheShiChuangInfo, out *Response) error {
	return h.OrderHandler.UpdateCheShiChuang(ctx, in, out)
}

func (h *orderHandler) DeleteCheShiChuang(ctx context.Context, in *CheShiChuangInfo, out *Response) error {
	return h.OrderHandler.DeleteCheShiChuang(ctx, in, out)
}

func (h *orderHandler) CreateDingDianTui(ctx context.Context, in *DingDianTuiInfo, out *Response) error {
	return h.OrderHandler.CreateDingDianTui(ctx, in, out)
}

func (h *orderHandler) QueryDingDianTuis(ctx context.Context, in *DingDianTuiInfo, out *Response) error {
	return h.OrderHandler.QueryDingDianTuis(ctx, in, out)
}

func (h *orderHandler) QueryDingDianTui(ctx context.Context, in *DingDianTuiInfo, out *Response) error {
	return h.OrderHandler.QueryDingDianTui(ctx, in, out)
}

func (h *orderHandler) UpdateDingDianTui(ctx context.Context, in *DingDianTuiInfo, out *Response) error {
	return h.OrderHandler.UpdateDingDianTui(ctx, in, out)
}

func (h *orderHandler) DeleteDingDianTui(ctx context.Context, in *DingDianTuiInfo, out *Response) error {
	return h.OrderHandler.DeleteDingDianTui(ctx, in, out)
}

func (h *orderHandler) CreateKeLiuJing(ctx context.Context, in *KeLiuJingInfo, out *Response) error {
	return h.OrderHandler.CreateKeLiuJing(ctx, in, out)
}

func (h *orderHandler) QueryKeLiuJings(ctx context.Context, in *KeLiuJingInfo, out *Response) error {
	return h.OrderHandler.QueryKeLiuJings(ctx, in, out)
}

func (h *orderHandler) QueryKeLiuJing(ctx context.Context, in *KeLiuJingInfo, out *Response) error {
	return h.OrderHandler.QueryKeLiuJing(ctx, in, out)
}

func (h *orderHandler) UpdateKeLiuJing(ctx context.Context, in *KeLiuJingInfo, out *Response) error {
	return h.OrderHandler.UpdateKeLiuJing(ctx, in, out)
}

func (h *orderHandler) DeleteKeLiuJing(ctx context.Context, in *KeLiuJingInfo, out *Response) error {
	return h.OrderHandler.DeleteKeLiuJing(ctx, in, out)
}

func (h *orderHandler) CreateChaoShiXin(ctx context.Context, in *ChaoShiXinInfo, out *Response) error {
	return h.OrderHandler.CreateChaoShiXin(ctx, in, out)
}

func (h *orderHandler) QueryChaoShiXins(ctx context.Context, in *ChaoShiXinInfo, out *Response) error {
	return h.OrderHandler.QueryChaoShiXins(ctx, in, out)
}

func (h *orderHandler) QueryChaoShiXin(ctx context.Context, in *ChaoShiXinInfo, out *Response) error {
	return h.OrderHandler.QueryChaoShiXin(ctx, in, out)
}

func (h *orderHandler) UpdateChaoShiXin(ctx context.Context, in *ChaoShiXinInfo, out *Response) error {
	return h.OrderHandler.UpdateChaoShiXin(ctx, in, out)
}

func (h *orderHandler) DeleteChaoShiXin(ctx context.Context, in *ChaoShiXinInfo, out *Response) error {
	return h.OrderHandler.DeleteChaoShiXin(ctx, in, out)
}

func (h *orderHandler) CreateAIYunHu(ctx context.Context, in *AIYunHuInfo, out *Response) error {
	return h.OrderHandler.CreateAIYunHu(ctx, in, out)
}

func (h *orderHandler) QueryAIYunHus(ctx context.Context, in *AIYunHuInfo, out *Response) error {
	return h.OrderHandler.QueryAIYunHus(ctx, in, out)
}

func (h *orderHandler) QueryAIYunHu(ctx context.Context, in *AIYunHuInfo, out *Response) error {
	return h.OrderHandler.QueryAIYunHu(ctx, in, out)
}

func (h *orderHandler) UpdateAIYunHu(ctx context.Context, in *AIYunHuInfo, out *Response) error {
	return h.OrderHandler.UpdateAIYunHu(ctx, in, out)
}

func (h *orderHandler) DeleteAIYunHu(ctx context.Context, in *AIYunHuInfo, out *Response) error {
	return h.OrderHandler.DeleteAIYunHu(ctx, in, out)
}

func (h *orderHandler) CreatePinXiaoTong(ctx context.Context, in *PinXiaoTongInfo, out *Response) error {
	return h.OrderHandler.CreatePinXiaoTong(ctx, in, out)
}

func (h *orderHandler) QueryPinXiaoTongs(ctx context.Context, in *PinXiaoTongInfo, out *Response) error {
	return h.OrderHandler.QueryPinXiaoTongs(ctx, in, out)
}

func (h *orderHandler) QueryPinXiaoTong(ctx context.Context, in *PinXiaoTongInfo, out *Response) error {
	return h.OrderHandler.QueryPinXiaoTong(ctx, in, out)
}

func (h *orderHandler) UpdatePinXiaoTong(ctx context.Context, in *PinXiaoTongInfo, out *Response) error {
	return h.OrderHandler.UpdatePinXiaoTong(ctx, in, out)
}

func (h *orderHandler) DeletePinXiaoTong(ctx context.Context, in *PinXiaoTongInfo, out *Response) error {
	return h.OrderHandler.DeletePinXiaoTong(ctx, in, out)
}

func (h *orderHandler) CreateYunHuaXiang(ctx context.Context, in *YunHuaXiangInfo, out *Response) error {
	return h.OrderHandler.CreateYunHuaXiang(ctx, in, out)
}

func (h *orderHandler) QueryYunHuaXiangs(ctx context.Context, in *YunHuaXiangInfo, out *Response) error {
	return h.OrderHandler.QueryYunHuaXiangs(ctx, in, out)
}

func (h *orderHandler) QueryYunHuaXiang(ctx context.Context, in *YunHuaXiangInfo, out *Response) error {
	return h.OrderHandler.QueryYunHuaXiang(ctx, in, out)
}

func (h *orderHandler) UpdateYunHuaXiang(ctx context.Context, in *YunHuaXiangInfo, out *Response) error {
	return h.OrderHandler.UpdateYunHuaXiang(ctx, in, out)
}

func (h *orderHandler) DeleteYunHuaXiang(ctx context.Context, in *YunHuaXiangInfo, out *Response) error {
	return h.OrderHandler.DeleteYunHuaXiang(ctx, in, out)
}

func (h *orderHandler) CreateWaQianKe(ctx context.Context, in *WaQianKeInfo, out *Response) error {
	return h.OrderHandler.CreateWaQianKe(ctx, in, out)
}

func (h *orderHandler) QueryWaQianKes(ctx context.Context, in *WaQianKeInfo, out *Response) error {
	return h.OrderHandler.QueryWaQianKes(ctx, in, out)
}

func (h *orderHandler) QueryWaQianKe(ctx context.Context, in *WaQianKeInfo, out *Response) error {
	return h.OrderHandler.QueryWaQianKe(ctx, in, out)
}

func (h *orderHandler) UpdateWaQianKe(ctx context.Context, in *WaQianKeInfo, out *Response) error {
	return h.OrderHandler.UpdateWaQianKe(ctx, in, out)
}

func (h *orderHandler) DeleteWaQianKe(ctx context.Context, in *WaQianKeInfo, out *Response) error {
	return h.OrderHandler.DeleteWaQianKe(ctx, in, out)
}

func (h *orderHandler) Login(ctx context.Context, in *LoginInfo, out *Response) error {
	return h.OrderHandler.Login(ctx, in, out)
}

func (h *orderHandler) User(ctx context.Context, in *UserInfo, out *Response) error {
	return h.OrderHandler.User(ctx, in, out)
}

func (h *orderHandler) Register(ctx context.Context, in *RegisterInfo, out *Response) error {
	return h.OrderHandler.Register(ctx, in, out)
}

func (h *orderHandler) SendCode(ctx context.Context, in *LoginInfo, out *Response) error {
	return h.OrderHandler.SendCode(ctx, in, out)
}
